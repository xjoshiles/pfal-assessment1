to-do:
- Could my routes be written better?
- random method in collections_controller
- comment users_controller
- should the validation happen within the try block in my controllers?
- do I need any other methods in my comments controller, e.g. delete?
- try block on store method on comments controller?

Questions for Zoltan:
- when do we get access to the tests?
- request body of create new / update collection
- Is my implementation of the update and destroy methods ideal?
  I'm finding the desired sets/collections and then matching user
  IDs or admin status before performing the operations.
  This is because I also want admins to be able to perform these operations,
  regardless of whether or not they are the creator. The request url
  for updating a set doesn't specify a user id, but the collection one
  does. Should this have any influence on my implementation?
  The userId parameter isn't even being used...
- do we return a redirect or a random collection?

- For frontend, use intertia (adocasts playlist), don't need 

- groups for routes

- vvvv Not done
- /collections/random - Redirect to a random flashcard set collection

- vvvv Test these:
- /users/{userId}/collections
- /users/{userId}/collections/{collectionId}
- /users/{userId}/collections/{collectionId}
- /users/{userId}/collections/{collectionId}
- /sets/{setId}       - Update flashcard set by ID
- /users/{userId}     - Update a user by ID


- Should we delete previous access tokens in auth_controller?
- Should we return a message on success in some controllers too?
- Return flashcards in a set in flashcards_controller store method
- get api version (top of OpenAPI spec)
- implement limit of 20 flashcard sets per day (modifiable)
- user sign up with username and password
- give admins their own dashboard from within which they can
  select a user, modify their admin status and flashcard limits.
- give users their own account dashboard where they can change
  their passwords (and maybe usernames?)



To safely delete a migration file:
- node ace migration:status     (make sure it is pending, i.e. not completed)
- delete the file
- node ace migration:refresh
- node ace migration:status     (ensure that it is gone)

Get routes:
node ace list:routes


auto-indent code:
shift + alt + f


"If you are using the @adonisjs/auth module, hashing passwords within your
model is unnecessary. The AuthFinder automatically handles password hashing,
ensuring your user credentials are securely processed. Learn more about
this process here".


Can collections have comments?

A FlashcardSet can have many Collections, and a Collection can have many
FlashcardSets.



Practical issues with REST
tight coupling, needs update to OpenAPI file, and then update to at least
two code bases (nackend and frontend)

GraphQL. Frontend decides which field it queries








Old code:

      // // Delete previous flashcards associated with the set
      // await Flashcard.query({ client: trx })
      //   .where('flashcardSetId', set.id).delete();

      // // Prepare the flashcards with the flashcard set ID
      // const flashcardsData = payload.flashcards.map((flashcard) => ({
      //   ...flashcard,
      //   flashcardSetId: set.id,
      // }))

      // // Create flashcards in the flashcard table
      // await Flashcard.createMany(flashcardsData, { client: trx })
