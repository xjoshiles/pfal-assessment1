openapi: 3.0.0
info:
  title: TestVar - Flashcards API
  description: "A revolutionaly REST API for flashcards"
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: http://testvar.difcsi.hu/api
    description: Reference server
paths:
  /:
    get:
      summary: "Return the active API version"
      tags:
        - "General"
      responses:
        "200":
          description: "The active API version"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  version:
                    type: "string"
                    example: "1.0.0"
  /login:
    post:
      summary: "Login"
      tags:
        - "Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: "Logged in successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    $ref: "#/components/schemas/Token"
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: "Incorrect username or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /logout:
    post:
      summary: "Logout"
      tags:
        - "Authentication"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Successfully logged out (token deleted server side)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/me:
    get:
      summary: "Validate current session token and get user object"
      tags:
        - "Authentication"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "The user associated with the session token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /limits/sets:
    get:
      summary: "Get the daily limit and today's count"
      tags:
        - "Limits"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "Successfully retrieved daily limit info"
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                    example: 20
                    minimum: 0
                  today:
                    type: integer
                    example: 15
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Update the daily creation limit"
      description: Only accessible by admin users
      tags:
        - "Limits"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  example: 20
                  minimum: 0
      responses:
        "200":
          description: "Successfully updated daily creation limit"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Authenticated but non-admin user" 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets:
    get:
      summary: "Get all flashcard sets"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "A list of flashcard sets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  allOf:
                    - $ref: "#/components/schemas/FlashcardSet"
                    - type: object
                  properties:
                    creator:
                      $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new flashcard set"
      description: "There can only be 20 new flashcard sets created per by non-admin users unless changed by an admin"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSet"
      responses:
        "201":
          description: "The created flashcard set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlashcardSet"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: "You (regular user) have reached the maximum number of flashcard sets allowed today"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setId}:
    parameters:
      - name: setId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    get:
      summary: "Get a flashcard set by ID"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "The flashcard set"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FlashcardSet"
                  - type: object
                properties:
                  reviews:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/SetReview"
                  creator:
                    $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a flashcard set by ID"
      description: "A users can only update their own set unless they are an admin. Set will be updated to match the payload. Optional flashcards IDs for existing flashcards are supported"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSet"
      responses:
        "200":
          description: "The updated flashcard set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlashcardSet"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to update another user's flashcard set as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a flashcard set by ID"
      description: "Users can only delete their own sets unless they are an admin"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "The flashcard set was deleted"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user's flashcard set as non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setID}/reviews:
    parameters:
      - name: setID
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    post:
      summary: "Review a flashcard set, by the current user"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostReview"
      responses:
        "201":
          description: "The created review"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetReview"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "User has already reviewed the set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setId}/reviews/{reviewId}:
    parameters:
      - name: setId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
      - name: reviewId
        in: path
        required: true
        description: "The ID of the flashcard set review"
        schema:
          type: "string"
    delete:
      summary: "Delete a flashcard set review"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "The review was deleted"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user's review as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set or review was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setId}/cards:
    parameters:
      - name: setId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    get:
      summary: "Get all flashcards in a set"
      tags:
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      parameters:
        - name: shuffle
          in: query
          required: false
          description: "Get the flashcards in a random order"
          schema:
            type: "boolean"
      responses:
        "200":
          description: "A list of flashcards"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Flashcard"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: "Get all users"
      tags:
        - "Users"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "A list of users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new user"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "201":
          description: "The created user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: "The username is already taken"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: |
            The server is unable to process the request due to invalid or missing data, such as:
            - Invalid username (too short or too long)
            - Invalid password (too short)
            - Missing required fields
            - Incorrect data types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: "The ID of the user"
        schema:
          type: "string"
    get:
      summary: "Get a user by ID"
      tags:
        - "Users"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "The user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a user's password by ID"
      tags:
        - "Users"
      security:
        - BearerAuth: []
      description: "A user can only update their own password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password"
                newPassword:
                  type: string
                  example: "validNewPassword"
      responses:
        "200":
          description: "A success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: "Invalid authentication token or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to update another user's password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: |
            The server is unable to process the request due to invalid or missing data, such as:
            - Invalid newPassword (too short)
            - Missing required fields
            - Incorrect data types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a user by ID"
      tags:
        - "Users"
      security:
        - BearerAuth: []
      description: "A user can only delete their own account unless they are an admin. When deleting their own account, they must provide a password"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password"
      responses:
        "204":
          description: "The user was deleted"
        "401":
          description: "Invalid authentication token or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The password was missing or an incorrect datatype"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/admin:
    parameters:
      - name: userId
        in: path
        required: true
        description: "The ID of the user"
        schema:
          type: "string"
    put:
      summary: "Update admin status of user by ID"
      tags:
        - "Users"
      security:
        - BearerAuth: []
      description: "Admin status only editable if the current user is an admin, but an admin cannot remove their own admin status"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                admin:
                  type: "boolean"
                  example: true
      responses:
        "200":
          description: "The updated user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to remove own admin status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The admin field was missing or an incorrect datatype"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/sets:
    get:
      summary: "Get all flashcard sets created by a user"
      tags:
        - "Users"
        - "FlashCard Sets"
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the user"
          schema:
            type: "string"
      responses:
        "200":
          description: "A list of flashcard sets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FlashcardSet"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections:
    get:
      summary: "Get all flashcard set collections"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "A list of flashcard set collections"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Collection"
                  - type: object
                properties:
                  creator:
                    $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new flashcard set collection"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCollection"
      responses:
        "201":
          description: "The created flashcard set collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{collectionId}:
    parameters:
      - name: collectionId
        in: path
        required: true
        description: "The ID of the collection"
        schema:
          type: "string"
    get:
      summary: "Get a flashcard set collection by ID"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "The flashcard set collection"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Collection"
                  - type: object
                properties:
                  reviews:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/CollectionReview"
                  creator:
                    $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a flashcard set collection by ID"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/PostCollection"
                - type: object
              required:
                - collectionId
              properties:
                collectionId:
                  type: integer
                  description: "The unique identifier for the collection"
                  example: 1
                  minimum: 1
      responses:
        "200":
          description: "The updated flashcard set collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to update another user's collection as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a flashcard set collection by ID"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "The flashcard set collection was deleted"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user's flashcard set collection as non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{collectionId}/reviews:
    parameters:
      - name: collectionId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    post:
      summary: "Review a flashcard set collection, by the current user"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostReview"
      responses:
        "201":
          description: "The created review"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionReview"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "User has already reviewed the collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The server is unable to process the request due to invalid or missing data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{collectionId}/reviews/{reviewId}:
    parameters:
      - name: collectionId
        in: path
        required: true
        description: "The ID of the flashcard set collection"
        schema:
          type: "string"
      - name: reviewId
        in: path
        required: true
        description: "The ID of the flashcard set collection review"
        schema:
          type: "string"
    delete:
      summary: "Delete a flashcard set collection review"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "The review was deleted"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user's review as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The flashcard set collection or review was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/random:
    get:
      summary: "Redirect to a random flashcard set collection"
      tags:
        - "Collections"
      security:
        - BearerAuth: []
      responses:
        "302":
          description: "Redirect to a random flashcard set collection"
          headers:
            Location:
              schema:
                type: "string"
                example: "/users/1/collections/1"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "There are no flashcard set collections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/collections:
    parameters:
      - name: userId
        in: path
        required: true
        description: "The ID of the user"
        schema:
          type: "string"
    get:
      summary: "Get all flashcard set collections created by a user"
      tags:
        - "Collections"
        - "Users"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "A list of flashcard set collections"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Collection"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:

    Flashcard:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
          description: "The unique identifier for the flashcard (optional)"
        question:
          type: "string"
          example: "What is the capital of France?"
          description: "The question for the flashcard"
        answer:
          type: "string"
          example: "Paris"
          description: "The answer to the question"
        difficulty:
          type: "string"
          enum:
            - "easy"
            - "medium"
            - "hard"
          example: "easy"
          description: "The difficulty level of the flashcard"
      required:
        - question
        - answer
        - difficulty
    
    FlashcardSet:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: "string"
          example: "European Capitals"
        description:
          type: "string"
          example: "Do you know the names of these capital cities?"
        averageRating:
          type: "number"
          example: 5
          minimum: 1
          maximum: 5
        userId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        flashcards:
          type: "array"
          items:
            $ref: "#/components/schemas/Flashcard"
    CreateSet:
      type: object
      properties:
        name:
          type: string
          example: "European Capitals"
          description: "The name of the flashcard set"
        description:
          type: string
          example: "Do you know the names of these capital cities?"
          description: "A brief description of the flashcard set"
        flashcards:
          type: array
          description: "A list of flashcards included in the set"
          minItems: 1
          items:
            type: object
            properties:
              question:
                type: string
                example: "What is the capital of France?"
                description: "The question for the flashcard"
              answer:
                type: string
                example: "Paris"
                description: "The answer to the question"
              difficulty:
                type: string
                enum:
                  - easy
                  - medium
                  - hard
                example: "easy"
                description: "The difficulty level of the flashcard"
            required:
              - question
              - answer
              - difficulty
      required:
        - name
        - description
        - flashcards
    UpdateSet:
      type: object
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: string
          example: "European Capitals"
          description: "The name of the flashcard set"
        description:
          type: string
          example: "Do you know the names of these capital cities?"
          description: "A brief description of the flashcard set"
        flashcards:
          type: array
          description: "A list of flashcards included in the set"
          minItems: 1
          items:
            allOf:
              - $ref: '#/components/schemas/Flashcard'  # This will inherit the Flashcard schema
      required:
        - id
        - name
        - description
        - flashcards
    Error:
      type: "object"
      properties:
        message:
          type: "string"
          example: "Error message"
          nullable: false
    Success:
      type: "object"
      properties:
        message:
          type: "string"
          example: "Success message"
          nullable: false
    User:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        username:
          type: "string"
          example: "johndoe"
        admin:
          type: "boolean"
          example: false
          default: false
          nullable: true
    UserCredentials:
      type: "object"
      properties:
        username:
          type: "string"
          example: "johndoe"
        password:
          type: "string"
          example: "password"
      required:
        - username
        - password
    Collection:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: "string"
          example: "Geography"
        description:
          type: "string"
          example: "A collection of Geography flashcard sets"
        averageRating:
          type: "number"
          example: 5
          minimum: 1
          maximum: 5
        userId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        flashcardSets:
          type: "array"
          items:
            $ref: "#/components/schemas/FlashcardSet"
    PostCollection:
      type: object
      properties:
        name:
          type: string
          description: "The name of the flashcard set collection"
          example: "Biology Basics"
        description:
          type: string
          description: "A brief description of the flashcard set collection"
          example: "An introductory collection of biology flashcard sets"
        flashcardSetIds:
          type: array
          description: "An array of IDs for flashcard sets included in the collection"
          items:
            type: integer
            minimum: 1
            description: "A positive integer representing a flashcard set ID"
            example: [1, 2, 3, 10]
      required:
        - name
        - description
        - flashcardSetIds
    SetReview:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: "string"
          example: "I love it!"
        userId:
          type: integer
          example: 1
          minimum: 1
        flashcardSetId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        author:
          $ref: "#/components/schemas/User"
    CollectionReview:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: "string"
          example: "I love it!"
        userId:
          type: integer
          example: 1
          minimum: 1
        collectionId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        author:
          $ref: "#/components/schemas/User"
    PostReview:
      type: "object"
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: "string"
          example: "I love it!"
      required:
        - rating
        - review
    Token:
      type: object
      properties:
        type:
          type: string
          example: "bearer"
          description: "The type of token issued"
        name:
          type: string
          nullable: true
          example: null
          description: "Optional name associated with the token"
        token:
          type: string
          example: "oat_OTY.abcdefghijklmnopqrstuvwxyz0123456789"
          description: "The actual token string"
        abilities:
          type: array
          items:
            type: string
            example: ["*"]
            description: "Permissions or abilities granted to the token"
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          example: null
          description: "Timestamp of the last usage of the token, if available"
        expiresAt:
          type: string
          format: date-time
          example: "2025-01-11T04:07:24.527Z"
          description: "Timestamp indicating when the token will expire"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
