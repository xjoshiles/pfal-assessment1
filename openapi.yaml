openapi: 3.0.0
info:
  title: TestVar - Flashcards API
  description: "A revolutionaly REST API for flashcards"
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: http://testvar.difcsi.hu/api
    description: Reference server
paths:
  /:
    get:
      summary: "Return the active API version"
      tags:
        - "General"
      responses:
        "200":
          description: "The active API version"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  version:
                    type: "string"
                    example: "1.0.0"
  /sets:
    get:
      summary: "Get all flashcard sets"
      tags:
        - "FlashCard Sets"
      responses:
        "200":
          description: "A list of flashcard sets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FlashcardSet"
    post:
      summary: "Create a new flashcard set"
      description: "There can only be 20 new flashcard sets created per day"
      tags:
        - "FlashCard Sets"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlashcardSet"
      responses:
        "201":
          description: "The created flashcard set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlashcardSet"
        "429":
          description: "You have reached the maximum number of flashcard sets allowed today"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setId}:
    parameters:
      - name: setId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    get:
      summary: "Get a flashcard set by ID"
      tags:
        - "FlashCard Sets"
      responses:
        "200":
          description: "The flashcard set"
          content:
            application/json:
              schema:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/FlashcardSet"
                  - type: "object"
                    properties:
                      comments:
                        type: "array"
                        description: "Comments on the set"
                        items:
                          type: "object"
                          properties:
                            comment:
                              type: "string"
                              example: "I love this set!"
                            author:
                              $ref: "#/components/schemas/User"
                             
                      
                            

                
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a flashcard set by ID"
      tags:
        - "FlashCard Sets"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlashcardSet"
      responses:
        "200":
          description: "The updated flashcard set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlashcardSet"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a flashcard set by ID"
      tags:
        - "FlashCard Sets"
      responses:
        "204":
          description: "The flashcard set was deleted"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /set/{setID}/comment:
    parameters:
      - name: setID
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    post:
      summary: "Comment on a flashcard set, by the current user"
      tags:
        - "FlashCard Sets"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                comment:
                  type: "string"
                  example: "I love this set!"
      responses:
        "201":
          description: "The created comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetReview"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sets/{setId}/cards:
    parameters:
      - name: setId
        in: path
        required: true
        description: "The ID of the flashcard set"
        schema:
          type: "string"
    get:
      summary: "Get all flashcards in a set"
      tags:
        - "FlashCard Sets"
      parameters:
        - name: shuffle
          in: query
          required: false
          description: "Get the flashcards in a random order"
          schema:
            type: "boolean"
      responses:
        "200":
          description: "A list of flashcards"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Flashcard"
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: "Get all users"
      tags:
        - "Users"
      responses:
        "200":
          description: "A list of users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Create a new user"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "201":
          description: "The created user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: "The username is already taken"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: |
            The request was well-formed but contains semantic errors. The server is unable to process the request due to invalid or missing data, such as:
            - Invalid username (too short or too long)
            - Invalid password (too short)
            - Missing required fields
            - Incorrect data types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: "The ID of the user"
        schema:
          type: "string"
    get:
      summary: "Get a user by ID"
      tags:
        - "Users"
      responses:
        "200":
          description: "The user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a user's password by ID"
      tags:
        - "Users"
      description: "A user can only update their own password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password"
                newPassword:
                  type: string
                  example: "validNewPassword"
      responses:
        "200":
          description: "A success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "401":
          description: "Invalid authentication token or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to update another user's password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: |
            The request was well-formed but contains semantic errors. The server is unable to process the request due to invalid or missing data, such as:
            - Invalid newPassword (too short)
            - Missing required fields
            - Incorrect data types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a user by ID"
      tags:
        - "Users"
      description: "A user can only delete their own account unless they are an admin. When deleting their own account, they must provide a password"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "password"
      responses:
        "204":
          description: "The user was deleted"
        "401":
          description: "Invalid authentication token or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to delete another user as a non-admin"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The password was missing or an incorrect datatype"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/admin:
    put:
      summary: "Update admin status of user by ID"
      tags:
        - "Users"
      description: "Admin status only editable if the current user is an admin, but an admin cannot remove their own admin status"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                admin:
                  type: "boolean"
                  example: true
      responses:
        "200":
          description: "The updated user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "Unauthorised: Missing or invalid authentication credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "Attempted to remove own admin status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: "The admin field was missing or an incorrect datatype"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userID}/sets:
    get:
      summary: "Get all flashcard sets created by a user"
      tags:
        - "Users"
        - "FlashCard Sets"
      parameters:
        - name: userID
          in: path
          required: true
          description: "The ID of the user"
          schema:
            type: "string"
      responses:
        "200":
          description: "A list of flashcard sets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FlashcardSet"
        "404":
          description: "The user was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userID}/collections:
    get:
      summary: "Get all flashcard set collections created by a user"
      tags:
        - "Collections"
      responses:
        "200":
          description: "A list of flashcard set collections"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      comment:
                        type: "string"  
                        description: "The user's comment on the set"
                      set:
                        $ref: "#/components/schemas/FlashcardSet"
  /users/{userID}/collections/{collectionID}:
    parameters:
      - name: userID
        in: path
        required: true
        description: "The ID of the user"
        schema:
          type: "string"
      - name: collectionID
        in: path
        required: true
        description: "The ID of the collection"
        schema:
          type: "string"
    get:
      summary: "Get a flashcard set collection by ID"
      tags:
        - "Collections"
      responses:
        "200":
          description: "The flashcard set collection"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    comment:
                      type: "string"  
                      description: "The user's comment on the set"
                    set:
                      $ref: "#/components/schemas/FlashcardSet"
                    user:
                      $ref: "#/components/schemas/User"  
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update a flashcard set collection by ID"
      tags:
        - "Collections"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "object"                
                properties:
                  comment:
                    type: "string"
                    example: "I love this set!"
                  setID:
                    type: "number"
                    example: 1
      responses:
        "200":
          description: "The updated flashcard set collection"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  comment:
                    type: "string"  
                    description: "The user's comment on the set"
                  set:
                    $ref: "#/components/schemas/FlashcardSet"
                  user:
                    $ref: "#/components/schemas/User"  
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "You are not authorized ('logged in') to update this collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "You are not allowed to update this collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete a flashcard set collection by ID"
      tags:
        - "Collections"
      responses:
        "204":
          description: "The flashcard set collection was deleted"
        "404":
          description: "The flashcard set collection was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "You are not authorized ('logged in') to delete this collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: "You are not allowed to delete this collection"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections:
    get:
      summary: "Get all flashcard set collections"
      tags:
        - "Collections"
      responses:
        "200":
          description: "A list of flashcard set collections"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      comment:
                        type: "string"  
                        description: "The user's comment on the set"
                      set:
                        $ref: "#/components/schemas/FlashcardSet"
                      user:
                        $ref: "#/components/schemas/User"  
    post:
      summary: "Create a new flashcard set collection"
      tags:
        - "Collections"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "object"
                properties:
                  comment:
                    type: "string"
                    example: "I love this set!"
                  setID:
                    type: "number"
                    example: 1

      responses:
        "201":
          description: "The created flashcard set collection"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "object"
                  properties:                  
                    comment:
                      type: "string"  
                      description: "The user's comment on the set"
                    set:
                      $ref: "#/components/schemas/FlashcardSet"
                    user:
                      $ref: "#/components/schemas/User"  
        "404":
          description: "The flashcard set was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/random:
    get:
      summary: "Redirect to a random flashcard set collection"
      tags:
        - "Collections"
      responses:
        "302":
          description: "Redirect to a random flashcard set collection"
          headers:
            Location:
              schema:
                type: "string"
                example: "/users/1/collections/1"
        "404":
          description: "There are no flashcard set collections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                  

components:
  schemas:
    Flashcard:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        question:
          type: "string"
          example: "What is the capital of France?"
        answer:
          type: "string"
          example: "Paris"
        difficulty:
          $ref: "#/components/schemas/Difficulty"
          nullable: true
    FlashcardSet:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: "string"
          example: "European Capitals"
        description:
          type: "string"
          example: "Do you know the names of these capital cities?"
        averageRating:
          type: "number"
          example: 5
          minimum: 1
          maximum: 5
        userId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        flashcards:
          type: "array"
          items:
            $ref: "#/components/schemas/Flashcard"
        reviews:
          type: "array"
          items:
            $ref: "#/components/schemas/SetReview"
        creator:
          $ref: "#/components/schemas/User"
    Error:
      type: "object"
      properties:
        message:
          type: "string"
          example: "Error"
          nullable: false
    Success:
      type: "object"
      properties:
        message:
          type: "string"
          example: "Success"
          nullable: false
    Difficulty:
      type: "string"
      enum:
        - "easy"
        - "medium"
        - "hard"
    User:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        username:
          type: "string"
          example: "johndoe"
        admin:
          type: "boolean"
          example: false
          default: false
          nullable: true
    UserCredentials:
      type: "object"
      properties:
        username:
          type: "string"
          example: "johndoe"
        password:
          type: "string"
          example: "password"
      required:
        - username
        - password
    Collection:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        name:
          type: "string"
          example: "Geography"
        description:
          type: "string"
          example: "A collection of Geography flashcard sets"
        averageRating:
          type: "number"
          example: 5
          minimum: 1
          maximum: 5
        userId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        flashcardSets:
          type: "array"
          items:
            $ref: "#/components/schemas/FlashcardSet"
        reviews:
          type: "array"
          items:
            $ref: "#/components/schemas/CollectionReview"
        creator:
          $ref: "#/components/schemas/User"
    SetReview:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: "string"
          example: "I love this set!"
        userId:
          type: integer
          example: 1
          minimum: 1
        flashcardSetId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        author:
          $ref: "#/components/schemas/User"
    CollectionReview:
      type: "object"
      properties:
        id:
          type: integer
          example: 1
          minimum: 1
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: "string"
          example: "I love this collection!"
        userId:
          type: integer
          example: 1
          minimum: 1
        collectionId:
          type: integer
          example: 1
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2024-10-14T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2024-10-15T12:00:00Z"
        author:
          $ref: "#/components/schemas/User"
